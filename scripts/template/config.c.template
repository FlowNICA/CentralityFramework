void config()
{
  // Set up input file from MC-Glauber
  std::string inFileGlauberName = "Path-to-Glauber-file";
  std::string inTreeGlauberName = "Mc-Glauber-tree-name"; //"nt_Bi_Bi"; "nt_Au3_Au3"; "nt_CsI_Xe124";
  
  // Set up input file with data multiplicity
  std::string inFileDataName = "Path-to-RefMult-file";
  std::string inHistDataName = "Mult-histo-name"; // for example "hRefMultSTAR";

  // Set up output directory
  std::string outDir = ".";

  // Set up number of iteration to find optimal mu parameter
  int Niter = 10;

  // Set up parameters for multiplicity fit
  float f_min  = fminfmin;
  float f_max  = fmaxfmax;
  float f_step = 0.01;
  float k_min  = kminkmin;
  float k_max  = kmaxkmax;
  float k_step = 1;
  float p_min  = pminpmin;
  float p_max  = pmaxpmax;
  float p_step = 0.001;

  // Set up fit ranges
  int multMin = multminmultmin;
  int multMax = multmaxmultmax;

  // Set up bin size in the data histogram
  int bin_size = 1;

  // Set up mode for number of ancestors calculation
  ///****************************************
  ///  |   mode    |   function for Na      |
  ///****************************************
  ///  |  Default  | f*Npart + (1-f)*Ncoll  |
  ///  |    PSD    |       f-Npart          |
  ///  |   Npart   |       Npart^f          |
  ///  |   Ncoll   |       Ncoll^f          |
  std::string mode = "Default";

  // Set up number of threads
  // sets maximum concurent processes by default
  unsigned int n_thr = std::thread::hardware_concurrency();
  
  std::unique_ptr<TFile> glauber_file{ TFile::Open(inFileGlauberName.c_str(), "read") };
  std::unique_ptr<TTree> glauber_tree{ (TTree*) glauber_file->Get(inTreeGlauberName.c_str()) };

  std::unique_ptr<TFile> data_file{ TFile::Open(inFileDataName.c_str(), "read")};
  std::unique_ptr<TH1F>  data_hist{ (TH1F*) data_file->Get(inHistDataName.c_str())};

  const int nevents = 10*(int(data_hist->Integral(multMin,multMax)));

  // Glauber::Fitter fitter ( std::move(glauber_tree), n_thr ); // in case of multithreading
  Glauber::Fitter fitter ( std::move(glauber_tree)); // without multithreading
  fitter.SetMode(mode.c_str());
  fitter.SetMassNumber(f_min/2);
  fitter.SetInputHisto(*data_hist);
  fitter.SetBinSize(bin_size);
  fitter.Init(nevents, mode.c_str());
  
  fitter.SetFitMinBin(multMin);
  fitter.SetFitMaxBin(multMax);
  fitter.SetOutDirName(outDir.c_str());
  fitter.SetNiter(Niter);
  fitter.SetFstepSize(f_step);
  fitter.SetKstepSize(k_step);
  fitter.SetPstepSize(p_step);

  // fitter.UseNbd();
  fitter.UseGamma();

  float chi2=1e10;
  chi2 = fitter.FitGlauber(f_min, f_max, k_min, k_max, p_min, p_max, nevents);

  float f_fit    = fitter.GetOptimalF();
  float k_fit    = fitter.GetOptimalK();
  float mu_fit   = fitter.GetOptimalMu();
  float p_fit    = fitter.GetOptimalP();
  float chi2_err = fitter.GetOptimalChi2Error();

  std::cout << "f = " << f_fit << "    mu = " << mu_fit << "    k = " << k_fit << "    p = " << p_fit << "    chi2 = " << chi2 << "    chi2_error = " << chi2_err << std::endl; 
  
  DrawHistos(fitter, true, true, true, true);

  const float range[2] = {(float)multMin, (float)multMax};
  std::unique_ptr<TH1F> hB(fitter.GetModelHisto (range, "B", 100000));
  hB->SaveAs( "b_test.root" );
}